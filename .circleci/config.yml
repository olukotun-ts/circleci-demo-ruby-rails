version: 2.1

orbs:   # Import reusable modules of config logic
  aws-cli: circleci/aws-cli@1.4.0
  node: circleci/node@2
  ruby: circleci/ruby@1.1.0

commands:   # Define reusable commands
  set-build-id:
    description: "Create and write BUILD_ID to workspace"
    steps:
      - run:
          name: Set BUILD_ID
          command: |
            BUILD_TIME=$(date +'%m%d%Y-%H%M%S')
            BUILD_ID=$(echo "${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-${CIRCLE_SHA1}-${BUILD_TIME}")
            echo "BUILD_TIME: $BUILD_TIME"
            echo "BUILD_ID: $BUILD_ID"

            echo "export BUILD_ID=$BUILD_ID" >> $BASH_ENV
            echo $BUILD_ID > BUILD_ID.env  
      - persist_to_workspace:
          root: ./
          paths:
            - BUILD_ID.env

  get-build-id:
    description: "Read BUILD_ID from workspace"
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Get BUILD_ID
          command: |
            echo "export BUILD_ID=$(<BUILD_ID.env)" >> $BASH_ENV
            echo "BUILD_ID: $BUILD_ID"

workflows:    # Collection of jobs orchestrated to run in a specific order
  version: 2
  build_test_deploy:
    jobs:
      - lint
      - test
      - build:
          requires:
            - lint
            - test
      - approve_deploy:
          type: approval
          requires:
            - build
      - deploy:
          requires:
            - approve_deploy

  convert_jenkins:
    jobs:
      - jenkins-build
      - jenkins-deploy:
          requires:
            - jenkins-build
      - approve-promote:
          type: approval
          requires:
            - jenkins-deploy
      - promote:
          requires:
            - approve-promote
      - deploy-stage:
          requires:
            - promote
      - approve-promote-stage:
          type: approval
          requires:
            - deploy-stage
      - promote-stage:
          requires:
            - approve-promote-stage
            
jobs: # Collection of commands needed to accomplish a specific task
  build:
    docker:   
      - image: cimg/ruby:2.7-node 
    resource_class: xlarge    
    steps:
      - checkout
      - get-build-id
      - run:
          name: Verify env vars
          command: |
            echo "BUILD_ID: $BUILD_ID"
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
  test:
    docker:   # Supported environments include Windows, macOS, Linux, and Docker
      - image: cimg/ruby:2.7-node   # Convenience images optimized for performance
      - image: circleci/postgres:9.5-alpine   # Load sidecar images to extend execution environment
        environment:
          POSTGRES_USER: circleci-demo-ruby
          POSTGRES_DB: rails_blog_test
          POSTGRES_PASSWORD: ""
    resource_class: xlarge  # Options range from small to 2xlarge+
    parallelism: 5  # Split tests across multiple nodes
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci-demo-ruby
      PGPASSWORD: ""
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"  # Caching dependencies speeds up builds
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      - ruby/rspec-test
      - ruby/rubocop-check
  deploy:
    docker:
      - image: cimg/ruby:2.7-node
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
  lint:
    docker:
      - image: cimg/ruby:2.7-node
    steps:
      - checkout
      - set-build-id

  jenkins-build:
    machine: true
    environment:
      WEBPACK_BUILD_DIR: public
      SITE_NAME: devops
      NVM_DIR: /opt/circleci/.nvm
    steps:
      - checkout
      # - aws-cli/setup
      # - run:
      #     name: Build app
      #     command: |
      #       [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
      #       nvm install v12.13.1 && nvm alias default v12.13.1

      #       rm -rf node_modules
      #       npm run pre-install
      #       npm rebuild node-sass
      #       npm install
      #       npm run build
      - set-build-id
      # - run:
      #     command: |
      #       BUILD_OBJ=$(echo "${BUILD_ID}.zip")
      #       id='{"application":"'"${CIRCLE_PROJECT_REPONAME}"'","build":"'"${BUILD_ID}"'","status":"SUCCESS"}'
      #       echo $id > "${WEBPACK_BUILD_DIR}/build.json"
      #       zip -r ${BUILD_OBJ} ${WEBPACK_BUILD_DIR}/*

      #       .circleci/scripts/myVault.sh DEV
      #       aws s3 cp ${BUILD_OBJ} s3://adobe-cchome-build-ue1/cchome-cchome/trailhead-${SITE_NAME}/
      #       rm -rf ${BUILD_OBJ}
      #       echo "CCHOME_BUILD_ID=${BUILD_ID}" > build.properties
  jenkins-deploy:
    machine: true
    environment:
      S3_CCHOME_CCHOME_CACHE_CONTROL_INDEX: 'public, max-age=900, must-revalidate'
      S3_CCHOME_CCHOME_CACHE_CONTROL_STATIC: 'public, max-age=31536000, immutable'
      S3_CCHOME_CCHOME_CACHE_CONTROL_JS: 'public, max-age=31536000, immutable'
      S3_CCHOME_CCHOME_CACHE_CONTROL_CSS: 'public, max-age=31536000, immutable'
      WEBPACK_BUILD_DIR: public
      SITE_NAME: devops
    steps:
      - checkout
      - aws-cli/setup
      - get-build-id
      - run:
          command: |
            CCHOME_BUILD_ID=$BUILD_ID
            echo "CCHOME_BUILD_ID: $CCHOME_BUILD_ID"
            .circleci/scripts/myVault.sh DEV
            aws s3 cp s3://adobe-cchome-build-ue1/cchome-cchome/trailhead-${SITE_NAME}/${CCHOME_BUILD_ID}.zip .

            set -x

            rm -rf ${WEBPACK_BUILD_DIR}
            unzip ${CCHOME_BUILD_ID}.zip
            rm -rf *.zip
            cd ${WEBPACK_BUILD_DIR}
            # Upload code to Cloudfront S3 origin with Cache-Control headers
            aws s3 sync . s3://adobe-cchome-${SITE_NAME}-ue1/static/
  promote:
    machine: true
    steps:
      - checkout
      - aws-cli/setup
      - run: chmod -R +x $HOME/project/.circleci/scripts/
      - run: $HOME/project/.circleci/scripts/promote.sh
  deploy-stage:
    machine: true
    steps:
      - checkout
      - aws-cli/setup
      - run: chmod -R +x $HOME/project/.circleci/scripts/
      - run: $HOME/project/.circleci/scripts/deploy-stage.sh
  promote-stage:
    machine: true
    steps:
      - checkout
      - aws-cli/setup
      - run: chmod -R +x $HOME/project/.circleci/scripts/
      - run: $HOME/project/.circleci/scripts/promote-stage.sh
